openapi: 3.0.0
info:
  description: API specification for SuperBlog microservice
  version: v3
  title: SuperBlog microservice API
servers:
  - url: http://localhost:8080/
paths:
  /articles:
    get:
      tags:
        - getArticleList
      summary: Get all articles
      operationId: getArticleList
      responses:
        '200':
          description: Get article list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleListResponse'
    post:
      tags:
        - createArticle
      summary: Create article
      operationId: createArticle
      requestBody:
        description: Create article
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        '200':
          description: Create article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'

  /articles/{articleId}:
    put:
      tags:
        - updateArticle
      summary: Update article
      operationId: updateArticle
      parameters:
        - name: articleId
          in: path
          description: Article ID
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: Update article
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        '200':
         description: Update article successfully
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
    delete:
      tags:
        - deleteArticle
      summary: Delete article
      operationId: deleteArticle
      parameters:
        - name: articleId
          in: path
          description: Article ID
          required: true
          schema:
            type: string
            format: string
#      requestBody:
#        description: Delete article
#        content:
#          'application/json':
#            schema:
#              $ref: '#/components/schemas/DeleteArticleRequest'
      responses:
        '200':
          description: Delete article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'

  /articles/{articleId}/comments:
    post:
      tags:
        - createComment
      summary: Create comment
      operationId: createComment
      parameters:
        - name: articleId
          in: path
          description: Article ID
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: Create comment
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '200':
          description: Create comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
  /articles/{articleId}/comments/{commentId}:
    put:
      tags:
        - updateComment
      summary: Update comment
      operationId: updateComment
      parameters:
        - name: articleId
          in: path
          description: Article ID
          required: true
          schema:
            type: string
            format: string
        - name: commentId
          in: path
          description: Comment ID
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: Update comment status
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Update comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
    delete:
      tags:
        - deleteComment
      summary: Delete comment
      operationId: deleteComment
      parameters:
        - name: articleId
          in: path
          description: Article ID
          required: true
          schema:
            type: string
            format: string
        - name: commentId
          in: path
          description: Comment ID
          required: true
          schema:
            type: string
            format: string
#      requestBody:
#        description: Delete comment
#        content:
#          'application/json':
#            schema:
#              $ref: '#/components/schemas/DeleteCommentRequest'
      responses:
        '200':
          description: Delete comment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'

  /categories:
    get:
      tags:
        - getCategoryList
      summary: Get all categories
      operationId: getCategoryList
      responses:
        '200':
          description: Get category list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
    post:
      tags:
        - createCategory
      summary: Create category
      operationId: createCategory
      requestBody:
        description: Create category
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '200':
          description: Create category successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'

  /categories/{categoryId}:
    put:
      tags:
        - updateCategory
      summary: Update category
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: Update category name
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Update category successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
    delete:
      tags:
        - deleteCategory
      summary: Delete category
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: Delete category successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'


  /users:
    get:
      tags:
        - getUserList
      summary: Get all users
      operationId: getUserList
      responses:
        '200':
          description: Get user list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
    post:
      tags:
        - createUser
      summary: Create user
      operationId: createUser
      requestBody:
        description: Create user
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Create user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
  /users/find-by-email:
    get:
      tags:
        - search user by email
      summary: Search user by email
      operationId: findUserByEmail
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Search user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

components:
  schemas:
    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseModel'
    UserResponseModel:
      type: object
      properties:
        name:
          type: string
        email:
          type: string

    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string

    CategoryListResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponseModel'
    CategoryResponseModel:
      properties:
        id:
          type: string
        categoryName:
          type: string

    CreateCategoryRequest:
      type: object
      properties:
        categoryName:
          type: string

    UpdateCategoryRequest:
      type: object
      properties:
        categoryName:
          type: string

    ArticleListResponse:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/ArticleResponseModel'
    ArticleResponseModel:
      type: object
      properties:
        articleId:
          type: string
        title:
          type: string
        content:
          type: string
        authorEmail:
          type: string
        createdAt:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponseModel'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentModel'
    CommentModel:
      type: object
      properties:
        commentId:
          type: string
        content:
          type: string
        userId:
          type: string
        userName:
          type: string
        articleId:
          type: string
        commentedAt:
          type: string
        status:
          type: string

    CreateArticleRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        authorId:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponseModel'

    UpdateArticleRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        authorId:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponseModel'
#    DeleteArticleRequest:
#      type: object
#      properties:
#        userId:
#          type: string

    CreateCommentRequest:
      type: object
      properties:
        content:
          type: string
        userId:
          type: string

    UpdateCommentRequest:
      type: object
      properties:
        status:
          type: string
        userUpdateId:
          type: string

#    DeleteCommentRequest:
#      type: object
#      properties:
#        userDeleteId:
#          type: string

    ObjectCreationSuccessResponse:
      type: object
      properties:
        id:
          type: string
        responseCode:
          type: integer

    ApiError:
      type: object
      properties:
        faults:
          type: array
          items:
            $ref: "#/components/schemas/Fault"
        responseCode:
          type: integer
    Fault:
      type: object
      properties:
        internalMessage:
          type: string
        code:
          type: integer
        userMessage:
          type: string

  examples:
    InternalServerError:
      value:
        responseCode: 500
        faults:
          -:
          userMessage: There're some error when processing this request. Please retry again or contact the site administrator for supporting
          internalMessage: Internal server error
          code: 1000
          responseCode: 500
